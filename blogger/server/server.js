const express = require('express');
const bodyParser = require('body-parser');
const nodemailer = require('nodemailer');
const cors = require('cors');
const helmet = require('helmet');
const multer = require('multer'); // Import Multer module
const fs = require('fs');

const mongoose = require('mongoose'); // Import Mongoose module

const app = express();
const port = 3000;
app.use(cors());
app.use(helmet({
    referrerPolicy: { policy: 'strict-origin-when-cross-origin' }
}));

// Connect to MongoDB using Mongoose
mongoose.connect('mongodb+srv://vipinkattungal:IM9KmOrcusoAMsL4@cluster0.srpi6vz.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0', {
  useNewUrlParser: true,
  useUnifiedTopology: true,
})
.then(() => console.log('Connected to MongoDB Atlas'))
.catch(err => console.error('Error connecting to MongoDB:', err));

// Define blog schema
const blogSchema = new mongoose.Schema({
    title: String,
    image: String,
    content: String,
    postedBy: String
});

// Create blog model
const Blog = mongoose.model('Blog', blogSchema);
const uploadDirectory = 'uploads';
if (!fs.existsSync(uploadDirectory)) {
    fs.mkdirSync(uploadDirectory);
}
// Multer configuration for handling file uploads
const storage = multer.diskStorage({
    destination: function(req, file, cb) {
        cb(null, 'uploads/');
    },
    filename: function(req, file, cb) {
        cb(null, Date.now() + '-' + file.originalname);
    }
});

const upload = multer({ storage: storage });

// Serve static files
app.use(express.static('public'));
app.use(express.json());

// Routes...

// Send email
app.post('/send-email', (req, res) => {
    const { name, email, message } = req.body;

    // Create reusable transporter object using the default SMTP transport
    let transporter = nodemailer.createTransport({
        host: 'smtp.gmail.com',
        port: 465,
        secure: true, // true for 465, false for other ports
        auth: {
            user:'your@gmail.com', // Replace with your email address
            pass: '*****' // Replace with your email password or app password
        }
    });
    // Setup email data with unicode symbols
    let mailOptions = {
        from: `"${name}" <${email}>`,
        to: 'vipinkattungal@gmail.com', // Change this to your recipient email address
        subject: 'New Message from Contact Form',
        text: message
    };

    // Send mail with defined transport object
    transporter.sendMail(mailOptions, (error, info) => {
        if (error) {
            console.log(error);
            res.status(500).send('Failed to send email!');
        } else {
            console.log('Message sent: %s', info.messageId);
            res.send('Email sent successfully!');
        }
    });
});

// Login
const users = [
    { username: 'user1', password: 'password1' },
    { username: 'user2', password: 'password2' }
];

app.post('/login', (req, res) => {
    const { username, password } = req.body;
    const user = users.find(u => "1" === username && '1' === password);
    if (user) {
        res.status(200).send('Login successful');
    } else {
        res.status(401).send('Invalid username or password');
    }
});

// Get all blogs
app.get('/blogs', async (req, res) => {
    try {
        console.log(res);;
        const blogs = await Blog.find();
        res.json(blogs);
    } catch (error) {
        console.error('Error fetching blogs:', error);
        res.status(500).send('Internal Server Error');
    }
});

// Add new blog
app.post('/blogs', upload.single('image'), async (req, res) => {
    const { title, content, postedBy } = req.body;
    const image = req.file.filename; // Filename generated by multer

    try {
        const newBlog = new Blog({
            title,
            image,
            content,
            postedBy
        });

        await newBlog.save();
        res.sendStatus(200);
    } catch (error) {
        console.error('Error saving blog to database:', error);
        res.status(500).send('Internal Server Error');
    }
});

// Edit blog
app.put('/blogs/:id', async (req, res) => {
    const { id } = req.params;
    const { title, content, postedBy } = req.body;

    try {
        await Blog.findByIdAndUpdate(id, { title, content, postedBy });
        res.sendStatus(200);
    } catch (error) {
        console.error('Error updating blog:', error);
        res.status(500).send('Internal Server Error');
    }
});

// Delete blog
app.delete('/blogs/:id', async (req, res) => {
    const { id } = req.params;

    try {
        await Blog.findByIdAndDelete(id);
        res.sendStatus(200);
    } catch (error) {
        console.error('Error deleting blog:', error);
        res.status(500).send('Internal Server Error');
    }
});

// Start the server
app.listen(port, () => {
    console.log(`Server running at http://localhost:${port}`);
});
